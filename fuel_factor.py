# -*- coding: utf-8 -*-
"""Fuel Factor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uV3ZUO3y0JsLvubHyHgdtSpudS61rFfH
"""

import pandas as pd
import gspread
from google.colab import auth
auth.authenticate_user()

import gspread
from google.auth import default
creds, _ = default()

gc = gspread.authorize(creds)

print("Fuel Factor: Insight into Nutritional Health of College Students. \nThank you for making out time to fill out this survey." \
"The purpose of this survey is to look into the eating habits of college students and find out how they affect student involvement and performance. If you are not comforable answering any question, feel free to skip it by clcking the 'Enter' key. ")


#To allow users skip a prompt
def optional_input(prompt, default_answer = None):
  answer = input(prompt)
  return answer if answer else default_answer

print("\nBasic Information")
name = optional_input('\nInput your first name and last name. ')
classification = input('\nEnter your classification: ')
age = input('\nEnter your age: ')
sex = optional_input("\nEnter biological sex('Needed because sex hormones affect food metabolism'): ")
residency = input('\nDo live on-campus or off-campus? ')

print("\nNutritional assessment")
nutri_goals = input('\nAre you concerned about: \n1. Weight gain, \n2. General health, \n3. Weight loss or \n4. Sports perfomance? \nPlease type in your choice(s). ')
health_conditions = optional_input('\nAre you affected by any of these: \n1. diabetes/prediabetes, \n2. kidney diseases, \n3. digestive tracts issues, \n4. liver health issues or others? \nPlease type them in. ' )
if health_conditions != None:
  special_diet = input('\nAre you on a special diet for them? Please specify: ')
else:
  special_diet = None


print("\nCurrent Nutritional Habits")
try:
    current_habit_rating = int(input("\nHow would you rate your nutritional habits on a scale of 1 to 5, with 1 being 'I don't really consider health meal options' and 5 being 'I make excellent nutritional choices' "))
except ValueError:
    print('Error. Rating must be a number between 1 and 5')
    current_habit_rating = None
    exit()

while True:
    eats_breakfast_str = input('\nHow often do you eat breakfast in a week? ')
    if eats_breakfast_str.isdigit():
        eats_breakfast = int(eats_breakfast_str)
        if 1 <= eats_breakfast <= 7:
            break
        else:
            print('Error. Enter a number between 1 and 7')
    else:
        print('Error. Please enter a number.')


while True:
  fast_food = input('\nHow often do you consume fast food or takeout per week? ')
  if fast_food.isdigit():
        fast_food = int(fast_food)
        if 0 <= fast_food <= 7:
            break
  else:
        print('Error. Please enter a number.')

while True:
  fruits_and_veggies = input('\nHow many servings/plates of fruit and veggies do you consume daily? ')
  if fruits_and_veggies.isdigit():
        fruits_and_veggies = int(fruits_and_veggies)
        if 0 <= fruits_and_veggies <= 10:
            break
  else:
        print('Error. Please enter a number.')

advice = input('\nHave you ever seen a dietician or nutritionist since you became a college student? ')
if advice.lower() not in ['yes', 'no']:
  print('Error. Please enter yes or no')
  exit()

print("\nExercise habits")
try:
    weekly_exercise = int(input('\nHow often do you engage in physical exercise per week? '))
    if not 0 <= weekly_exercise <= 7:
        raise ValueError
except ValueError:
    print('Error: Enter a number between 0 and 7 for exercise frequency. ')
    weekly_exercise = None
    exit()

daily_energy_levels = input('\nHow would you describe your energy levels throughout the day? Very low, Low, Average, High or Very High? ')

answers = {"Name":("Ifunanya Alinnor"), "Classification":("Freshman"),
 "Age":(18),
 "Sex":("Female"),
 "Residency":("On-campus"),
 "Nutritional_Goals": ("Weight loss"),
 "Health_Conditions":("None"),
 "Special_Diet":("None"),
 "Current_Habit_Rating":("2"),
 "Eats_Breakfast":("4"),
 "Fast_Food_Consumption":("2"),
 "Fruits_and_Vegetables": ("4"),
 "Advice":("Yes"),
 "Weekly_Exercise":("No"),
 "Daily_Energy_Level":("Low")}

answers = pd.DataFrame(answers, index=[0])

survey_result = {"Name":name, "Classification":classification, "Age":age, "Sex":sex, "Residency":residency, "Nutritional_Goals": nutri_goals, "Health_Conditions":health_conditions, "Special_Diet":special_diet, "Current_Habit_Rating":current_habit_rating, "Eats_Breakfast":eats_breakfast, "Fast_Food_Consumption":fast_food, "Fruits_and_Vegetables": fruits_and_veggies, "Advice":advice, "Weekly_Exercise":weekly_exercise, "Daily_Energy_Level":daily_energy_levels}
survey_df = pd.DataFrame([survey_result])


# Save to CSV
survey_df.to_csv("dataframe_for_analysis.csv", index=False)

print("\nThank you for completing the survey! Your responses have been recorded.")


# Upload Survey Data to Google Sheets
sheet_name = "Data Collection Trial 2"
analysis_sheet = gc.open(sheet_name)
worksheet = analysis_sheet.sheet1

# Get the current number of rows in the sheet
existing_rows = len(worksheet.get_all_values())

# Append the new data
new_data = [survey_df.columns.values.tolist()] if existing_rows == 0 else []  # Add headers only if sheet is empty
new_data += survey_df.values.tolist()

# Update the worksheet starting from the next available row
worksheet.append_rows(new_data, value_input_option='RAW')

#Data Analysis
import matplotlib.pyplot as plt
import pandas as pd # Average of weekly excercise vs. energy levels
sheet_id = '1KNqqrnRzfeui9HnkqnQldc1EFNUAZ8yieg54110BfrE'
compiled_data = pd.read_csv(f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv")
query_1 = compiled_data[['Weekly_Exercise', 'Daily_Energy_Level']]
low_level = query_1.loc[query_1['Daily_Energy_Level'] == 'Low'] #and query_1['Daily_Energy_Level'] == 'Very Low']
low_level_exercise = round(low_level['Weekly_Exercise'].mean())
high_level = query_1.loc[query_1['Daily_Energy_Level'] == 'High']
high_level_exercise = round(high_level['Weekly_Exercise'].mean())
very_high_level = query_1.loc[query_1['Daily_Energy_Level'] == 'Very High']
very_high_level_exercise = round(very_high_level['Weekly_Exercise'].mean())
visualization_1 = {
    "Levels" : ["Low", "High", "Very High"],
    "Exercise" : [low_level_exercise, high_level_exercise, very_high_level_exercise]
}

df_1 = pd.DataFrame(visualization_1)


#horizontal barchart
plt.barh(df_1['Levels'],df_1['Exercise'], color = 'navy')
plt.xlabel('Exercise Session per Week')
plt.ylabel('Levels')
plt.title('Average of weekly excercise vs. energy levels')
plt.show()

import pandas as pd
sheet_id = '1KNqqrnRzfeui9HnkqnQldc1EFNUAZ8yieg54110BfrE' #percentage of students with different energy levels
compiled_data = pd.read_csv(f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv")
query_1 = compiled_data[['Weekly_Exercise', 'Daily_Energy_Level']]
Total_of_inputs = query_1.shape[0]
Total_Low = query_1.loc[query_1['Daily_Energy_Level'] == 'Low'].shape[0]
Total_High = query_1.loc[query_1['Daily_Energy_Level'] == 'High'].shape[0]
Total_Very_High = query_1.loc[query_1['Daily_Energy_Level'] == 'Very High'].shape[0]
df_2 = {
    "Levels" : ["Low", "High", "Very High"],
    "Total_Inputs" : [Total_Low, Total_High, Total_Very_High]
}
categories = df_2['Levels']
values = df_2["Total_Inputs"]
df_2 = pd.DataFrame(df_2)
#pie chart
plt.pie(
    values,labels = categories, autopct ='%1.1f%%',
    startangle = 90,
    colors = ['skyblue','orange', 'lightblue']
)
plt.title('Percentage of Students with Different Energy Levels')
plt.show()

import matplotlib.pyplot as plt
import pandas as pd #number of students with health conditions that have gotten advice, which would help arrange for a special diet.
sheet_id = '1KNqqrnRzfeui9HnkqnQldc1EFNUAZ8yieg54110BfrE'
compiled_data = pd.read_csv(f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv")
df_3 = compiled_data[["Health_Conditions","Advice"]]
filtered_df = df_3[df_3['Health_Conditions'].notna()]
answered_yes = filtered_df[filtered_df['Advice'] == 'Yes'].shape[0]
answered_no = filtered_df[filtered_df['Advice'] == 'No'].shape[0]
filtered_df = {
    'Advice' : ["Yes", "No"],
    'People with Health Conditions' : [answered_yes, answered_no]
}
filtered_df = pd.DataFrame(filtered_df)
filtered_df

#column chart
categories = filtered_df['Advice']
values = filtered_df['People with Health Conditions']

plt.bar(categories,values,color = 'skyblue')
plt.xlabel('Advice')
plt.ylabel('Number of Students')
plt.title('Number of Students with Health Conditions that have met the Dietician.')
plt.show()

import pandas as pd # most females have weight loss as a goal, and most males have sports performance as a goal. #PERCENTAGE!!
sheet_id = '1KNqqrnRzfeui9HnkqnQldc1EFNUAZ8yieg54110BfrE'
compiled_data = pd.read_csv(f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv")
compiled_data[["Nutritional_Goals", "Sex"]]
desire_sports = compiled_data.loc[
    (compiled_data['Nutritional_Goals'] == 4) &
    (compiled_data['Sex'] == 'Male')]
male_desire_sports = desire_sports.shape[0]

desire_sports = compiled_data.loc[
    (compiled_data['Nutritional_Goals'] == 4) &
    (compiled_data['Sex'] == 'Female')]
female_desire_sports = desire_sports.shape[0]

desire_weight_loss = compiled_data.loc[
    (compiled_data['Nutritional_Goals'] == 3) &
    (compiled_data['Sex'] == 'Male')]
male_desire_weight_loss = desire_weight_loss.shape[0]

desire_weight_loss = compiled_data.loc[
    (compiled_data['Nutritional_Goals'] == 3) &
    (compiled_data['Sex'] == 'Female')]
female_desire_weight_loss = desire_weight_loss.shape[0]

df_4 = {
    "Sex" : ["Male", "Female"],
    "Weight Loss" : [male_desire_weight_loss, female_desire_weight_loss],
    "Sports Performance" : [male_desire_sports, female_desire_sports]
}
df_4 = pd.DataFrame(df_4)

for column in df_4.columns[1:]:
  total = df_4[column].sum()
  df_4[column + '%'] = (df_4[column]/total)*100
  df_4[column + '%'] = df_4[column + '%'].round(2)

df_4 = df_4[["Sex","Weight Loss%","Sports Performance%"]]
df_4 #pie chart
categories = df_4['Sex']
values = df_4['Weight Loss%']
plt.pie(
    values,
    labels = categories,
    autopct ='%1.1f%%',
    startangle = 90,
    colors = ['lightblue','pink']
)
plt.title('Number of Boys and Girls that desire Weight Loss')
plt.show()

categories = df_4['Sex']
values = df_4['Sports Performance%']
plt.pie(
    values,
    labels = categories,
    autopct ='%1.1f%%',
    startangle = 90,
    colors = ['lightblue','pink']
)
plt.title('Number of Boys and Girls \nthat desire Sports Performance')
plt.show()